server.py

import socket
import threading

def handle_client(client_socket, client_address):
    print(f"Accepted connection from {client_address}")
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if not message:
                break
            print(f"Received from {client_address}: {message}")
            broadcast(message, client_socket)
        except Exception as e:
            print(f"Error handling client {client_address}: {e}")
            break
    print(f"Connection from {client_address} closed.")
    client_sockets.remove(client_socket)
    client_socket.close()

def broadcast(message, sender_socket):
    for client_socket in client_sockets:
        if client_socket != sender_socket:
            try:
                client_socket.send(message.encode('utf-8'))
            except Exception as e:
                print(f"Error broadcasting message to {client_socket.getpeername()}: {e}")

server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind(('localhost', 12345))
server_socket.listen(5)
print("Server is listening for incoming connections...")

client_sockets = []

while True:
    client_socket, client_address = server_socket.accept()
    client_sockets.append(client_socket)
    client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
    client_thread.start()



client.py

import socket
import threading

def receive_messages():
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            print(message)
        except Exception as e:
            print(f"Error receiving message: {e}")
            break

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client_socket.connect(('localhost', 12345))

receive_thread = threading.Thread(target=receive_messages)
receive_thread.start()

while True:
    try:
        message = input()
        client_socket.send(message.encode('utf-8'))
    except Exception as e:
        print(f"Error sending message: {e}")
        break

client_socket.close()
